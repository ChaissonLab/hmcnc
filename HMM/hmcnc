#!/usr/bin/env python


import os
import sys
import argparse
import subprocess
DIR = os.path.dirname( os.path.realpath(__file__) )
CWD = os.getcwd()

parser = argparse.ArgumentParser(description="",
usage="""hmcnc <command> [<args>]
Hidden Markov Copy Number Caller command options:
	asm:   Run a denovo assembly.
	aln:   Run a reference alignment.
""")
parser.add_argument("command", help="aln Vs asm", choices=["aln", "asm"])
#parser.add_argument('--version', action='version', version='%(prog)s 1.0.0')
mode = parser.parse_args(sys.argv[1:2])



if (mode.command == "asm"):
    parser = argparse.ArgumentParser(description=f"hmcnc {mode.command}", formatter_class=argparse.ArgumentDefaultsHelpFormatter, usage='''
		hmcnc asm --bam <input.bam> --index <ref.index> [<args>]
		Run HMM caller on assembly. ''')

    parser.add_argument("--bam" ,help="Bam file of Assembly, index file should be in same dir.",required=True)
    parser.add_argument("--mq", help="Min MapQ for reads", default=10)
    parser.add_argument("--outdir", help="Output directory",default=".")
#    parser.add_argument("--configfile", help="provide config json ")
    parser.add_argument("--index",help="index file of reference",required=True)
    SMK = f"{DIR}/asmcaller.smk"


if (mode.command == "aln"):
    parser = argparse.ArgumentParser(description=f"hmcnc {mode.command}", formatter_class=argparse.ArgumentDefaultsHelpFormatter, usage='''
    	hmcnc aln --bam <input.bam)> --index <ref.index> [<args>]
    	Run HMM caller on alignment. If available, provide repeat mask annotation (--repeatMask, -r) for the reference used to filter >80 precent repeat content calls." ''')

    parser.add_argument("--bam" ,help="Bam file of Alignment, index file should be in same dir.",required=True)
    parser.add_argument("--mq", help="Min MapQ for reads", default=10)
    parser.add_argument("--outdir", help="Output directory",default=".")
#    parser.add_argument("--configfile", help="provide config json ")
    parser.add_argument("--index",help="index file of reference",required=True)

    parser.add_argument("--repeatMask",help="Provide reference based repeat bed file.", default="No")
    SMK = f"{DIR}/caller.smk"


parser.add_argument("--coverage", help="Provide genome-wide coverage, if not specified, caller will calculate mean coverage per contig.",default="No")
parser.add_argument("--subread", help="[1|0], Needs subreads filtering or not.(PacBio clr reads)" ,default=0)
parser.add_argument("-t", "--threads", help="Threads available", default=1, type=int)
parser.add_argument("--epsi", help="epsilon parameter", default=90, type=float)
parser.add_argument("--minL", help="min collapse length", default=15000, type=int)


#SMK = f"{DIR}/caller.smk"
parser.add_argument("--scr",  help="Scripts DIR",required=True )




args, snakeargs = parser.parse_known_args(sys.argv[2:])

SCR = f"{args.scr}"


if(not os.path.exists(str(args.bam) + ".bai")):
	parser.error(f'{args.bam} must be indexed, try samtools faidx {args.bam}')


# create snakemake command
#cmd=f'''cd {DIR}/envs && source {DIR}/envs/env_python3.sh && cd {CWD} \
#&&
cmd=f'''snakemake -p -j {args.threads} -s {SMK} \
'''



snakeargs = " ".join(snakeargs)
if(len(snakeargs) > 0):
	sys.stderr.write(f"Extra arguments passed to snakemake: {snakeargs}\n\n")
	cmd += f" {snakeargs} "

# add configuration options from argparse
cmd += " --config "
for arg in vars(args):
    val = getattr(args, arg)
    cmd += f'{arg}={val} '
cmd += f'scr={SCR}'

# execute snakemake
sys.stderr.write(cmd+"\n")
#print(DIR,CWD)
subprocess.call(cmd, shell=True)
